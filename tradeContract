// SPDX-License-Identifier: GPL-2.0-or-later
pragma solidity =0.7.5;
pragma abicoder v2;

import "https://github.com/balancer/balancer-v2-monorepo/blob/master/pkg/interfaces/contracts/vault/IVault.sol";
import "https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/ISwapRouter.sol";

contract TradeContract {
    address private constant SUSHISWAP_ROUTER = 0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506;
    IVault.SingleSwap singleSwap;
    IVault.FundManagement funds;

    struct TradeData {
        address tradeContract;
        bytes32 poolId;
        uint24 poolFee1;
        uint24 poolFee2;
    }

    constructor() {
        singleSwap = IVault.SingleSwap(
            bytes32(0),
            IVault.SwapKind.GIVEN_IN,
            IAsset(address(0)),
            IAsset(address(0)),
            0,
            bytes("")
        );
        funds = IVault.FundManagement(
            address(this),
            false,
            payable(address(0)),
            false
        );
    }

    function swap (
        TradeData memory tradeData,
        address ub,
        address uc,
        uint256 _amount
    ) external {
        IERC20(uc).transferFrom(msg.sender, address(this), _amount);
        IERC20(uc).approve(tradeData.tradeContract, _amount);
        if(tradeData.poolFee2 == 0){
            singleSwap.poolId = tradeData.poolId;
            singleSwap.assetIn = IAsset(uc);
            singleSwap.assetOut = IAsset(ub);
            singleSwap.amount = _amount;
            funds.recipient = payable(msg.sender);
            uint256 limit = 0;
            uint256 deadline = block.timestamp;
            IVault(tradeData.tradeContract).swap(singleSwap, funds, limit, deadline);}
        else{
            ISwapRouter.ExactInputSingleParams memory params =
                ISwapRouter.ExactInputSingleParams({
                    tokenIn: uc,
                    tokenOut: ub,
                    fee: tradeData.poolFee2,
                    recipient: msg.sender,
                    deadline: block.timestamp,
                    amountIn: _amount,
                    amountOutMinimum: 0,
                    sqrtPriceLimitX96: 0
                });
            uint256 amountOut = ISwapRouter(tradeData.tradeContract).exactInputSingle(params);
        }
    }
}
