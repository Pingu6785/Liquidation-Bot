// SPDX-License-Identifier: AGPL-3.0
pragma solidity 0.8.10;

import "https://github.com/aave/aave-v3-core/blob/master/contracts/flashloan/base/FlashLoanSimpleReceiverBase.sol";


struct TradeData {
        address tradeContract;
        bytes32 poolId;
        uint24 poolFee1;
        uint24 poolFee2;
    }
    
struct LiqData {
    address ub;
    address uc;
    address scb;
    address scc;
    address wallet;
}

interface Trade_Interface {
    function trade(
        TradeData calldata tradeData,
        address ub,
        address uc,
        uint256 amount
    )
    external;
}

interface IWrap {
    function withdraw(
        uint256 amount
    ) external;
}

interface ERC20 {
    function approve(address spender, uint256 amount) external;
    function balanceOf(address account) external returns (uint256);
    function transfer(address to, uint256 amount) external returns (bool);
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}

interface CTokenInterfaces {
    function redeem(uint256 redeemTokens) external returns (uint256);
    function liquidateBorrow(address borrower, uint256 repayAmount, address cTokenCollateral) external returns (uint256);
    function balanceOf(address owner) external view returns (uint256);
}

interface LendingPool {
    function liquidationCall(
        address collateralAsset,
        address debtAsset,
        address user,
        uint256 debtToCover,
        bool receiveAToken
    ) external;

    function flashLoanSimple(
        address receiverAddress,
        address asset,
        uint256 amount,
        bytes calldata params,
        uint16 referralCode
    ) external returns(bool);
}


contract AaveFlashLoans_Optimism is FlashLoanSimpleReceiverBase {
   
    constructor(IPoolAddressesProvider provider) FlashLoanSimpleReceiverBase(provider) {}

    address private constant pool = 0x794a61358D6845594F94dc1DB02A252b5b4814aD;
    address private constant tradeContract = #####################;
    address private constant endwallet = #####################;;
    address private constant caller = #####################;;

function doFlashloan(
        LiqData calldata liqData,        
        TradeData calldata tradeData,
        uint256 borrowAmount
    ) external {
        bytes memory params = abi.encode(liqData, tradeData, borrowAmount);
        uint16 referral = 0;
        LendingPool(pool).flashLoanSimple(address(this), liqData.ub, borrowAmount, params, referral);
    }

function executeOperation(
        address asset,
        uint256 amount,
        uint256 premium,
        address initiator,
        bytes calldata params
    ) external returns (bool) {
        require(initiator == address(this), "FlashBorrower: Untrusted loan initiator");
        (LiqData memory liqData, TradeData memory tradeData) = abi.decode(params, (LiqData, TradeData));

        uint256 totalAmount = amount + premium;

        ERC20(liqData.ub).approve(msg.sender, totalAmount);
        ERC20(liqData.ub).approve(liqData.scb, amount);

        liquidate(liqData.scb, liqData.wallet, amount, liqData.scc);
        tradeBack(tradeData, liqData.ub, liqData.uc, amount, totalAmount);
        return(true);
    }

    function liquidate(
            address scb, 
            address wallet, 
            uint256 amount, 
            address scc
        ) internal {
            CTokenInterfaces(scb).liquidateBorrow(wallet, amount, scc);
            CTokenInterfaces(scc).redeem(CTokenInterfaces(scc).balanceOf(address(this)));
    }

    function tradeBack(
        TradeData memory tradeData, 
        address ub, 
        address uc, 
        uint256 amount,
        uint256 totalAmount
        ) internal {
            ERC20(uc).approve(tradeContract, ERC20(uc).balanceOf(address(this)));
            Trade_Interface(tradeContract).trade(tradeData, ub, uc, amount);
            ERC20(ub).transfer(endwallet, (ERC20(ub).balanceOf(address(this)) - totalAmount));
        }
}
